# Generated by Django 2.2 on 2019-12-04 03:13

import certification.models.certifying_organisation
import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CertifyingOrganisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of organisation or institution', max_length=200)),
                ('organisation_email', models.CharField(help_text='Email address organisation or institution.', max_length=200, validators=[certification.models.certifying_organisation.validate_email_address])),
                ('url', models.URLField(blank=True, help_text="Optional URL for the certifying organisation's home page", null=True)),
                ('address', models.TextField(help_text='Address of Organisation or Institution.', max_length=1000)),
                ('logo', models.ImageField(blank=True, help_text='Logo for this organisation. Most browsers support dragging the image directly on to the "Choose File" button above.', upload_to='images/organisations')),
                ('country', django_countries.fields.CountryField(blank=True, help_text='Select the country for this Institution', max_length=2, null=True)),
                ('organisation_phone', models.CharField(help_text='Phone number: (country code)(number) e.g. +6221551553', max_length=200)),
                ('organisation_credits', models.IntegerField(blank=True, default=0, help_text='Credits available', null=True)),
                ('approved', models.BooleanField(default=False, help_text='Approval from project admin')),
                ('enabled', models.BooleanField(default=True, help_text='Project enabled')),
                ('rejected', models.BooleanField(default=False, help_text='Rejection from project admin')),
                ('remarks', models.CharField(blank=True, help_text='Remarks regarding status of this organisation, i.e. Rejected, because lacks of information', max_length=500, null=True)),
                ('slug', models.SlugField()),
                ('organisation_owners', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Project')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TrainingCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Training Center name.', max_length=150, unique=True)),
                ('email', models.CharField(help_text='Valid email address for communication purposes.', max_length=150, validators=[certification.models.certifying_organisation.validate_email_address])),
                ('address', models.TextField(help_text='Address of the training center.', max_length=250)),
                ('phone', models.CharField(help_text='Phone number: (country code)(number) e.g. +6221551553', max_length=150)),
                ('location', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('slug', models.SlugField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('certifying_organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.CertifyingOrganisation')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(certification.models.certifying_organisation.SlugifyingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the status', max_length=200)),
                ('order', models.IntegerField(blank=True, null=True, unique=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Project')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('name', 'project')},
            },
        ),
        migrations.CreateModel(
            name='HistoricalCertifyingOrganisationCertificate',
            fields=[
                ('int_id', models.IntegerField(blank=True, db_index=True)),
                ('certificateID', models.CharField(blank=True, default='', max_length=100)),
                ('issued', models.DateTimeField(default=datetime.datetime(2019, 12, 4, 5, 13, 44, 674507))),
                ('valid', models.BooleanField(default=True, help_text='Is this certificate still valid?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('author', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('certifying_organisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='certification.CertifyingOrganisation')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical certifying organisation certificate',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCertifyingOrganisation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of organisation or institution', max_length=200)),
                ('organisation_email', models.CharField(help_text='Email address organisation or institution.', max_length=200, validators=[certification.models.certifying_organisation.validate_email_address])),
                ('url', models.URLField(blank=True, help_text="Optional URL for the certifying organisation's home page", null=True)),
                ('address', models.TextField(help_text='Address of Organisation or Institution.', max_length=1000)),
                ('logo', models.TextField(blank=True, help_text='Logo for this organisation. Most browsers support dragging the image directly on to the "Choose File" button above.', max_length=100)),
                ('country', django_countries.fields.CountryField(blank=True, help_text='Select the country for this Institution', max_length=2, null=True)),
                ('organisation_phone', models.CharField(help_text='Phone number: (country code)(number) e.g. +6221551553', max_length=200)),
                ('organisation_credits', models.IntegerField(blank=True, default=0, help_text='Credits available', null=True)),
                ('approved', models.BooleanField(default=False, help_text='Approval from project admin')),
                ('enabled', models.BooleanField(default=True, help_text='Project enabled')),
                ('rejected', models.BooleanField(default=False, help_text='Rejection from project admin')),
                ('remarks', models.CharField(blank=True, help_text='Remarks regarding status of this organisation, i.e. Rejected, because lacks of information', max_length=500, null=True)),
                ('slug', models.SlugField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.Project')),
                ('status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='certification.Status')),
            ],
            options={
                'verbose_name': 'historical certifying organisation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Course type.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Course type description - 1000 characters limit.', max_length=1000, null=True)),
                ('instruction_hours', models.CharField(blank=True, help_text='Number of instruction hours e.g. 40 hours', max_length=200, null=True)),
                ('coursetype_link', models.CharField(blank=True, help_text='Link to course types e.g. http://kartoza.com/', max_length=200, null=True, verbose_name='Link')),
                ('slug', models.SlugField(unique=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('certifying_organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.CertifyingOrganisation')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'certifying_organisation')},
            },
        ),
        migrations.CreateModel(
            name='CourseConvener',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(blank=True, default='', max_length=100)),
                ('signature', models.ImageField(blank=True, help_text='Signature of the course convener. Most browsers support dragging the image directly on to the "Choose File" button above.', upload_to='images/organisations/conveners')),
                ('title', models.CharField(blank=True, help_text='Title of the course convener, e.g. Prof.', max_length=50, null=True)),
                ('degree', models.CharField(blank=True, help_text='Degree of the course convener, e.g. MSc.', max_length=50, null=True)),
                ('certifying_organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.CertifyingOrganisation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Course name.', max_length=200, null=True)),
                ('language', models.CharField(blank=True, default='English', help_text='A language that the Course will be conducted in, e.g. English.', max_length=200, null=True)),
                ('trained_competence', models.CharField(blank=True, help_text='Trained competence e.g. Plugin development.', max_length=255, null=True, verbose_name='Trained competence(s)')),
                ('start_date', models.DateField(default=django.utils.timezone.now, help_text='Course start date', verbose_name='Start date')),
                ('end_date', models.DateField(default=django.utils.timezone.now, help_text='Course end date', verbose_name='End date')),
                ('slug', models.CharField(blank=True, default='', max_length=400)),
                ('template_certificate', models.ImageField(blank=True, help_text='Background template of the certificate. Most browsers support dragging the image directly on to the "Choose File" button above.', upload_to='images/organisations/certificates')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('certifying_organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.CertifyingOrganisation')),
                ('course_convener', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.CourseConvener')),
                ('course_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.CourseType')),
                ('training_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.TrainingCenter')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('course_convener', 'course_type', 'training_center', 'start_date', 'end_date', 'certifying_organisation')},
            },
        ),
        migrations.CreateModel(
            name='CertifyingOrganisationCertificate',
            fields=[
                ('int_id', models.AutoField(primary_key=True, serialize=False)),
                ('certificateID', models.CharField(blank=True, default='', max_length=100)),
                ('issued', models.DateTimeField(default=datetime.datetime(2019, 12, 4, 5, 13, 44, 674507))),
                ('valid', models.BooleanField(default=True, help_text='Is this certificate still valid?')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('certifying_organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.CertifyingOrganisation')),
            ],
            options={
                'ordering': ['certificateID'],
            },
        ),
        migrations.AddField(
            model_name='certifyingorganisation',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='certification.Status'),
        ),
        migrations.CreateModel(
            name='Attendee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(help_text='First name of the attendee.', max_length=200)),
                ('surname', models.CharField(help_text='Surname of the attendee.', max_length=200)),
                ('email', models.CharField(help_text='Email address.', max_length=200, validators=[certification.models.certifying_organisation.validate_email_address])),
                ('slug', models.SlugField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('certifying_organisation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='certification.CertifyingOrganisation')),
            ],
            options={
                'ordering': ['firstname'],
                'unique_together': {('firstname', 'surname', 'email', 'certifying_organisation')},
            },
        ),
        migrations.CreateModel(
            name='CourseAttendee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.Attendee')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.Course')),
            ],
            options={
                'unique_together': {('attendee', 'course')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='certifyingorganisation',
            unique_together={('name', 'project')},
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('int_id', models.AutoField(primary_key=True, serialize=False)),
                ('certificateID', models.CharField(blank=True, default='', max_length=100)),
                ('is_paid', models.BooleanField(default=False, help_text='Is this certificate paid?')),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.Attendee')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='certification.Course')),
            ],
            options={
                'ordering': ['certificateID'],
                'unique_together': {('course', 'attendee')},
            },
        ),
    ]
