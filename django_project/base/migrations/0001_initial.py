# Generated by Django 2.2 on 2019-12-04 03:13

import base.models.project
import colorfield.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of this organisation.', max_length=150, unique=True)),
                ('approved', models.BooleanField(default=False, help_text='Whether this organisation has been approved for use yet.')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of this project.', max_length=255, unique=True)),
                ('description', models.CharField(blank=True, help_text='A short description for the project', max_length=500, null=True)),
                ('precis', models.TextField(blank=True, help_text='A detailed summary of the project. Markdown is supported.', max_length=2000, null=True)),
                ('image_file', models.ImageField(blank=True, help_text='A logo image for this project. Most browsers support dragging the image directly on to the "Choose File" button above. The ideal size for your image is 512 x 512 pixels.', upload_to='images/projects')),
                ('accent_color', colorfield.fields.ColorField(blank=True, default='#FF0000', help_text='A color represent the project color', max_length=18, null=True)),
                ('project_representative_signature', models.ImageField(blank=True, help_text='This signature will be used on invoices and certificates. Most browsers support dragging the image directly on to the "Choose File" button above.', upload_to='images/projects/signatures')),
                ('approved', models.BooleanField(default=False, help_text='Whether this project has been approved for use yet.')),
                ('credit_cost', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Cost for each credit that organisation can buy.', max_digits=10, null=True)),
                ('certificate_credit', models.IntegerField(blank=True, default=1, help_text='Cost to issue a certificate, i.e. a certificate cost 1 credit', null=True)),
                ('private', models.BooleanField(default=False, help_text='Only visible to logged-in users?')),
                ('project_url', models.URLField(blank=True, help_text='Optional URL for this project\\s home page', null=True)),
                ('project_repository_url', models.URLField(blank=True, help_text="A repository URL for this project. For instance a path to the project's GitHub repository.", null=True)),
                ('sponsorship_programme', models.TextField(blank=True, help_text='Please describe the sponsorship programme for this project (if any). Markdown is supported', max_length=10000, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('gitter_room', models.CharField(blank=True, help_text='Gitter room name, e.g. gitterhq/sandbox', max_length=255, null=True, validators=[base.models.project.validate_gitter_room_name])),
                ('template_certifying_organisation_certificate', models.ImageField(blank=True, help_text='Background template of the certificate for certifying organisation. Most browsers support dragging the image directly on to the "Choose File" button above.', upload_to='images/projects/organisation_certificates')),
                ('certification_managers', models.ManyToManyField(blank=True, help_text='Managers of the certification app in this project. They will receive email notification about organisation and have the same permissions as project owner in the certification app.', related_name='certification_managers', to=settings.AUTH_USER_MODEL)),
                ('changelog_managers', models.ManyToManyField(blank=True, help_text='Managers of the changelog in this project. They will be allowed to approve changelog entries in the moderation queue.', related_name='changelog_managers', to=settings.AUTH_USER_MODEL)),
                ('lesson_managers', models.ManyToManyField(blank=True, help_text='Managers of the lesson app in this project. They will be allowed to create or remove lessons.', related_name='lesson_managers', to=settings.AUTH_USER_MODEL)),
                ('organisation', models.ForeignKey(default=base.models.project.get_default_organisation, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='base.Organisation')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project_representative', models.ForeignKey(blank=True, help_text='Project representative. This name will be used on invoices and certificates. ', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_representative', to=settings.AUTH_USER_MODEL)),
                ('sponsorship_managers', models.ManyToManyField(blank=True, help_text='Managers of the sponsorship in this project. They will be allowed to approve sponsor entries in the moderation queue.', related_name='sponsorship_managers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectScreenshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screenshot', models.ImageField(blank=True, help_text='A project screenshot.', upload_to='images/projects/screenshots')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenshots', to='base.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Project', 'Project'), ('Organisation', 'Organisation')], default='project', help_text='For organisation, domain will point to list of projects within the organisation and for project, domain will only point to a specific project.', max_length=30)),
                ('domain', models.CharField(help_text='Custom domain, i.e. projecta.kartoza.com.', max_length=30, unique=True)),
                ('approved', models.BooleanField(default=False, help_text='Whether this domain has been approved for use yet.')),
                ('paid', models.BooleanField(default=False, help_text='Whether this domain has been paid for use yet.')),
                ('organisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Organisation')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['domain'],
            },
        ),
    ]
